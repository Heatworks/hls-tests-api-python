# coding: utf-8

"""
    HLS - Tests

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2017-03-02T13:53:08Z
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Test(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, description=None, channels=None, range=None, tags=None, markers=None):
        """
        Test - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'channels': 'object',
            'range': 'list[int]',
            'tags': 'object',
            'markers': 'list[TestMarkers]'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'channels': 'channels',
            'range': 'range',
            'tags': 'tags',
            'markers': 'markers'
        }

        self._name = name
        self._description = description
        self._channels = channels
        self._range = range
        self._tags = tags
        self._markers = markers

    @property
    def name(self):
        """
        Gets the name of this Test.

        :return: The name of this Test.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Test.

        :param name: The name of this Test.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Test.

        :return: The description of this Test.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Test.

        :param description: The description of this Test.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def channels(self):
        """
        Gets the channels of this Test.
        Labeled data channels that relate to the test.

        :return: The channels of this Test.
        :rtype: object
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this Test.
        Labeled data channels that relate to the test.

        :param channels: The channels of this Test.
        :type: object
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def range(self):
        """
        Gets the range of this Test.

        :return: The range of this Test.
        :rtype: list[int]
        """
        return self._range

    @range.setter
    def range(self, range):
        """
        Sets the range of this Test.

        :param range: The range of this Test.
        :type: list[int]
        """

        self._range = range

    @property
    def tags(self):
        """
        Gets the tags of this Test.

        :return: The tags of this Test.
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Test.

        :param tags: The tags of this Test.
        :type: object
        """

        self._tags = tags

    @property
    def markers(self):
        """
        Gets the markers of this Test.

        :return: The markers of this Test.
        :rtype: list[TestMarkers]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """
        Sets the markers of this Test.

        :param markers: The markers of this Test.
        :type: list[TestMarkers]
        """

        self._markers = markers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
